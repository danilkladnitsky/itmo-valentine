version: '3.8'
services:
  frontend:
    container_name: client
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    build:
      dockerfile: Dockerfile
      context: valentine-frontend-service
    volumes:
      - ./valentine-frontend-service:/usr/src/frontend
      - ./valentine-frontend-service/node_modules:/usr/src/frontend/node_modules

  nginx:
    container_name: reverse_proxy
    image: nginx:latest
    depends_on:
      - rest
      - auth
      - pg_admin
      - frontend
    restart: always
    build:
      dockerfile: Dockerfile
      context: nginx
    ports:
      - '8080:8080'

  rest:
    container_name: api_gateway
    build:
      dockerfile: Dockerfile
      context: valentine-rest-service
      target: development
    volumes:
      - ./valentine-rest-service:/usr/src/rest
      - ./valentine-rest-service/node_modules:/usr/src/rest/node_modules
    command: npm run start:dev
    depends_on:
      - postgres
      - rabbit
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: ${DB_URL}
      RMQ_LINK: ${RMQ_LINK}
      JWT_SECRET: ${JWT_SECRET}
    restart: always
    ports:
      - 3000:3000

  auth:
    container_name: users_service
    build:
      dockerfile: Dockerfile
      context: ./valentine-auth-service
      target: development
    volumes:
      - ./valentine-auth-service:/usr/src/auth
      - ./valentine-auth-service/node_modules:/usr/src/auth/node_modules
    command: npm run start:dev
    depends_on:
      - postgres
      - rabbit
    environment:
      NODE_ENV: development
      DATABASE_URL: ${DB_URL}
      AUTH_LINK: ${AUTH_LINK}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      GRANT_TYPE: ${GRANT_TYPE}
      REDIRECT_URI: ${REDIRECT_URI}
      RMQ_LINK: ${RMQ_LINK}
      JWT_SECRET: ${JWT_SECRET}
    restart: always

  postgres:
    container_name: postgres
    image: postgres:10.4
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
      POSTGRES_HOST: postgres
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

  pgbackups:
    container_name: backup_service
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backup:/backups
    links:
      - postgres
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=${PG_HOST}
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@every 0h15m00s
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=81

  pg_admin:
    container_name: pgadmin
    image: dpage/pgadmin4:4.28
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
    ports:
      - 5440:80
    restart: always

  rabbit:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - '15000:15672'
      - '5672:5672'
    tty: true
    restart: always
